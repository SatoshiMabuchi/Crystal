#version 150
uniform mat4 projectionMatrix;
uniform vec3 eyePosition;
uniform sampler2D depthTex;
uniform sampler2D normalTex;
struct LightInfo {
	vec3 position;
	vec3 La;
	vec3 Ld;
	vec3 Ls;
};
uniform LightInfo light;
struct MaterialInfo {
	vec3 Ka;
	vec3 Kd;
	vec3 Ks;
	float shininess;
};
uniform MaterialInfo material;
in vec2 texCoord;
out vec4 fragColor;
float getDepth(vec2 tCoord){
	return texture2D(depthTex, tCoord).r;
}
vec3 uvToEye(vec2 tCoord, float depth) {
	vec4 clippingPosition = vec4(tCoord, depth, 1.0);
	vec4 viewPosition = inverse(projectionMatrix) * clippingPosition;
	return viewPosition.xyz / viewPosition.w;
}
vec3 getEyePosition(vec2 texCoord){
	float depth = getDepth(texCoord);
	return uvToEye(texCoord, depth);
}
vec3 getPhongShadedColor( vec3 position, vec3 normal) {
	vec3 s = normalize(light.position - position);
	vec3 v = normalize(position - eyePosition);
	vec3 r = reflect( -s, normal );
	vec3 ambient = light.La * material.Ka;
	float innerProduct = max( dot(s,normal), 0.0);
	vec3 diffuse = light.Ld * material.Kd * innerProduct;
	vec3 specular = vec3(0.0);
	if(innerProduct > 0.0) {
		specular = light.Ls * material.Ks * pow( max( dot(r,v), 0.0 ), material.shininess );
	}
	return ambient + diffuse + specular;
}
void main(void) {
	float depth = getDepth(texCoord);
	if(depth < 0.01) {
		fragColor = vec4(0.0, 0.0, 0.0, 0.0);
		return;
	}
	vec3 normal = texture2D(normalTex, texCoord).rgb;
	vec3 eyePosition = getEyePosition(texCoord);
	fragColor.rgb = getPhongShadedColor( eyePosition, normal);
	fragColor.a = 1.0;
}